import requests
import json
import time

API_KEY = 'U6M7CL9QUVGODEXVGEYU0O1CR0QPC5LFJK2H16YLV4MUZGJWNXK5CAO29VLG8T72'
API_URL = "https://vulners.com/api/v3/search/lucene/"


def check_vulnerabilities(software, version):
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Vulners Checker/1.0"
    }
    all_vulnerabilities = []
    page = 0

    try:
        while True:
            payload = {
                "apiKey": API_KEY,
                "query": f'affectedSoftware.name:"{software.lower()}" AND affectedSoftware.version:"{version}"',
                "sort": "published",
                "size": 100,
                "page": page,
                "fields": ["id", "title", "description", "cvss", "affectedSoftware"]
            }

            response = requests.post(API_URL, headers=headers, json=payload, timeout=20)
            response.raise_for_status()

            data = response.json()
            print("Raw API response:", json.dumps(data, indent=2))  # Логирование ответа

            if not data.get("result") == "OK":
                print("API Error:", data.get("data", {}).get("error", "Unknown error"))
                break

            documents = data.get("data", {}).get("documents", [])
            all_vulnerabilities.extend(documents)

            if len(documents) < 100:
                break

            page += 1
            time.sleep(1.5)

    except Exception as e:
        print(f"Critical error: {str(e)}")

    return all_vulnerabilities


# Пример использования
libreoffice_vulns = check_vulnerabilities("libreoffice", "6.0.7")
print(f"Found {len(libreoffice_vulns)} vulnerabilities")
for vuln in libreoffice_vulns:
    print(f"- {vuln['id']} ({vuln.get('title', 'No title')})")
